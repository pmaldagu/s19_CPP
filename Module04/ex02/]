/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Squad.cpp                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pmaldagu <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/04/19 17:45:08 by pmaldagu          #+#    #+#             */
/*   Updated: 2021/05/07 14:09:25 by pmaldagu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "Squad.hpp"

Squad::Squad( void ) 
{
	this->_unit = nullptr;
	this->_member = 0;

	return;
}

Squad::Squad( Squad const & src )
{
	*this = src;

	return;
}

Squad::~Squad( void )
{
	delete [] _unit;

	return;
}

Squad & Squad::operator=(Squad const & src)
{
	//std::cout << "Assignation operator called" << std::endl;
	//this->_n = src.getRawBits();

	return *this;
}

int Squad::getCount( void ) const
{
	int count;
	Squad* cpy;

	*cpy = *this;
	count = 0;
	while ( cpy )
	{
		cpy = cpy->_nextUnit;
		count++;
	}
	return ( count );
}

ISpaceMarine* Squad::getUnit( int n ) const
{
	int i;
	Squad *cpy;

	i = 0;
	*cpy = *this;
	std::cout << "HAH\n";
	while (cpy->_nextUnit && i < n)
	{
		std::cout << "CRU\n";
		cpy = cpy->_nextUnit;
		i++;
	}
	if ( i != n )
	{
		std::cout << "This Unit doesn't exits" << std::endl;
		return nullptr;
	}
	std::cout << "8\n";
	return cpy->_unit;
}

void Squad::setUnit( ISpaceMarine* newUnit )
{
	this->_unit = newUnit;

	return;
}

void Squad::setNextUnit( void )
{
	this->_nextUnit = new Squad;

	return;
}


int Squad::push( ISpaceMarine* newUnit)
{
	int i;
	Squad *cpy;

	i = 0;
	*cpy = *this;
	while (cpy && cpy->_unit)
	{
		cpy = cpy->_nextUnit;
		i++;
	}
	cpy->setNextUnit();
	cpy->setUnit(newUnit);
	return ( i + 1 );
}
